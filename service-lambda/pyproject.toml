[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "widget-service-lambda"
version = "0.1.0"
description = "AWS Lambda for widget CRUD operations with ALB integration"
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.13"
authors = [
    { name = "AI Agent", email = "agent@example.com" },
]
dependencies = [
    "boto3>=1.34.0",
    "python-json-logger>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.8.0",
    "mypy>=1.11.0",
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "moto[dynamodb]>=5.0.0",
    "boto3-stubs[dynamodb]>=1.34.0",
]

[tool.ruff]
line-length = 88
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "S",   # flake8-bandit
    "C4",  # flake8-comprehensions
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "RUF", # Ruff-specific rules
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "S101", # Use of assert (allowed in tests)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
strict_optional = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = "src.lambda_handler"
disable_error_code = "str-bytes-safe"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --cov=src --cov-report=term-missing --cov-report=xml"
testpaths = [
    "tests",
]